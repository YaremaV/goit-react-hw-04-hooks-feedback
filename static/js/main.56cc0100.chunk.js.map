{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/Notification/Notification.js","components/Container/Container.js","App.js","index.js"],"names":["Section","title","children","className","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","Container","App","useState","setGood","setNeutral","setBad","countTotalFeedback","type","name","onClick","prevState","some","value","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TAEe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,oCACE,qBAAIC,UAAU,QAAd,cAAwBF,KACvBC,K,YCFQ,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,eAACT,EAAD,CAASC,MAAM,aAAf,UACE,uCAAUI,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,mDAAsBC,EAAtB,U,MCdS,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,mBAAGR,UAAU,UAAb,SAAwBQ,I,UCClBC,EAFG,SAAC,GAAD,IAAGV,EAAH,EAAGA,SAAH,OAAkB,qBAAKC,UAAU,YAAf,SAA4BD,KCGjD,SAASW,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOR,EAAP,KAAgBU,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOP,EAAP,KAAYU,EAAZ,KAcA,SAASC,IACP,OAAOb,EAAOC,EAAUC,EAO1B,OACE,eAAC,EAAD,WACE,wBACEJ,UAAU,SACVgB,KAAK,SACLC,KAAMf,EACNgB,QA1BmB,WACvBN,GAAQ,SAAAO,GAAS,OAAIA,EAAY,MAqB/B,SAMGjB,IAEH,wBACEF,UAAU,SACVgB,KAAK,SACLC,KAAMd,EACNe,QA9BsB,WAC1BL,GAAW,SAAAM,GAAS,OAAIA,EAAY,MAyBlC,SAMGhB,IAEH,wBACEH,UAAU,SACVgB,KAAK,SACLC,KAAMb,EACNc,QAlCkB,WACtBJ,GAAO,SAAAK,GAAS,OAAIA,EAAY,MA6B9B,SAMGf,IAIF,CAACF,EAAMC,EAASC,GAAKgB,MAAK,SAAAC,GAAK,OAAIA,EAAQ,KAC1C,cAACpB,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOU,IACPT,mBArCCgB,KAAKC,MAAOrB,EAAOa,IAAwB,OAwC9C,cAACR,EAAD,CAAcC,QAAQ,yBC/D9BgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAChB,EAAD,MAEFiB,SAASC,eAAe,W","file":"static/js/main.56cc0100.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2 className=\"title\"> {title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './statistics.css';\r\nimport Section from '../Section/Section';\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <Section title=\"Statistics\">\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback:{positivePercentage}%</p>\r\n    </Section>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './notification.css';\r\n\r\nexport default function Notification({ message }) {\r\n  return <p className=\"message\">{message}</p>;\r\n}\r\n","import React from 'react';\r\nimport './Container.css';\r\n\r\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\r\n\r\nexport default Container;","import React, { useEffect, useState } from 'react';\r\nimport Feedback from './components/Feedback/Feedback';\r\nimport Statistics from './components/Statistics/Statistics';\r\nimport Notification from './components/Notification/Notification';\r\nimport Container from './components/Container/Container';\r\n\r\nexport default function App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const getGoodIncrement = () => {\r\n    setGood(prevState => prevState + 1);\r\n  };\r\n\r\n  const getNeutralIncrement = () => {\r\n    setNeutral(prevState => prevState + 1);\r\n  };\r\n\r\n  const getBadIncrement = () => {\r\n    setBad(prevState => prevState + 1);\r\n  };\r\n\r\n  function countTotalFeedback() {\r\n    return good + neutral + bad;\r\n  }\r\n\r\n  function countPositiveFeedbackPercentage() {\r\n    return Math.round((good / countTotalFeedback()) * 100);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <button\r\n        className=\"button\"\r\n        type=\"button\"\r\n        name={good}\r\n        onClick={getGoodIncrement}\r\n      >\r\n        {good}\r\n      </button>\r\n      <button\r\n        className=\"button\"\r\n        type=\"button\"\r\n        name={neutral}\r\n        onClick={getNeutralIncrement}\r\n      >\r\n        {neutral}\r\n      </button>\r\n      <button\r\n        className=\"button\"\r\n        type=\"button\"\r\n        name={bad}\r\n        onClick={getBadIncrement}\r\n      >\r\n        {bad}\r\n      </button>\r\n      {/* <Feedback options={[good, neutral, bad]} onLeaveFeedback={getFeedback} /> */}\r\n\r\n      {[good, neutral, bad].some(value => value > 0) ? (\r\n        <Statistics\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={countTotalFeedback()}\r\n          positivePercentage={countPositiveFeedbackPercentage()}\r\n        />\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n// class App extends Component {\r\n//   static defaultProps = {\r\n//     positivePercentage: 0,\r\n//   };\r\n\r\n//   static propTypes = {\r\n//     good: PropTypes.number,\r\n//     neutral: PropTypes.number,\r\n//     bad: PropTypes.number,\r\n//   };\r\n\r\n//   state = {\r\n//     good: 0,\r\n//     neutral: 0,\r\n//     bad: 0,\r\n//   };\r\n\r\n//   getFeedback = feedBack => {\r\n//     this.setState(prevState => ({\r\n//       [feedBack]: prevState[feedBack] + 1,\r\n//     }));\r\n//   };\r\n\r\n//   countTotalFeedback = ({ good, neutral, bad } = this.state) => {\r\n//     return good + neutral + bad;\r\n//   };\r\n\r\n//   countPositiveFeedbackPercentage = ({ good } = this.state) => {\r\n//     return Math.round((good / this.countTotalFeedback()) * 100);\r\n//   };\r\n\r\n//   render() {\r\n//     const { good, neutral, bad } = this.state;\r\n//     const keys = Object.keys(this.state);\r\n//     const stats = Object.values(this.state);\r\n\r\n//     return (\r\n//       <Container>\r\n//         <Feedback options={keys} onLeaveFeedback={this.getFeedback} />\r\n\r\n//         {stats.some(value => value > 0) ? (\r\n//           <Statistics\r\n//             good={good}\r\n//             neutral={neutral}\r\n//             bad={bad}\r\n//             total={this.countTotalFeedback()}\r\n//             positivePercentage={this.countPositiveFeedbackPercentage()}\r\n//           />\r\n//         ) : (\r\n//           <Notification message=\"No feedback given\" />\r\n//         )}\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}